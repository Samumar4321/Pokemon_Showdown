/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pokemon;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.colorchooser.AbstractColorChooserPanel;

/**
 *
 * @author samum
 */
public class TestConnessioneFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    int port = 12345;
    int y = 0;
    Pokemon pattuale;
    Mossa m;
    Condivisa c;

    public TestConnessioneFrame() throws SocketException, UnknownHostException {
        initComponents();
        this.getContentPane().setBackground(Color.gray);
        jScrollPane1.getViewport().setBackground(Color.gray);
        c = Condivisa.getInstance();
        setSquadra();
        this.setTitle("CHAT_VIRTUALE");
        c.frame = this;
        String s = (String) JOptionPane.showInputDialog(
                this,
                "Inserire l'username\n",
                "Login Dialog",
                JOptionPane.PLAIN_MESSAGE
        );
        c.nome = s;
        Insets ins = new Insets(3, 0, 0, 3);
        gc.insets = ins;
        System.out.println("NOME: " + s);
        panel.setLayout(new GridBagLayout());
        panel.setDoubleBuffered(true);
        T_Listen listen = new T_Listen();
        listen.start();
        pattuale = c.pokemons.get(0);
        for (int i = 0; i < pattuale.getMosse().size(); i++) {
            jComboBox1.addItem(pattuale.getMosse().get(i).getNome());
        }
    }

    private void setSquadra() throws SocketException {
        c = Condivisa.getInstance();
        for (int j = 0; j < 6; j++) {
            Pokemon p = new Pokemon(c.pokemons.get(0));
            c.squadra.add(p);
        }
        c.numePokemon = 6;
    }

    private void AlertTurno() {
        JOptionPane.showMessageDialog(this, "ASPETTARE IL PROPRIO TURNO");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setBorder(null);
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setToolTipText("");
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setDoubleBuffered(true);

        jButton1.setText("CONNETTI A:");
        jButton1.setToolTipText("");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jTextField1.setAutoscrolls(false);

        jButton2.setText("ATTACCA");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("CAMBIO POKEMON");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(210, 210, 210)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55))
        );

        jScrollPane1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Connesione() {

        String ipname = jTextField1.getText();
        if (!ipname.equals("")) {
            try {
                System.out.println("P inviato\n");
                Condivisa c = Condivisa.getInstance();
                c.mittente = true;
                // TODO add your handling code here:               
                String str = "a;" + c.nome + ";";
                byte[] buffer = str.getBytes();
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                InetAddress ip = InetAddress.getByName(ipname);
                Gestore_Packet gp = Gestore_Packet.GetInstance();
                gp.connectedIP = ip;
                packet.setAddress(ip);
                packet.setPort(port);
                Condivisa.getInstance().serverInvio.send(packet);
                Condivisa.getInstance().turno = true;
            } catch (SocketException ex) {
                Logger.getLogger(TestConnessioneFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnknownHostException ex) {
                Logger.getLogger(TestConnessioneFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TestConnessioneFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            String[] opt = {"OK", "ANNULLA"};
            int choice = JOptionPane.showOptionDialog(this, "Connessione...", null, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opt, opt[1]);

            if (choice == 1) {
                try {
                    Condivisa c = Condivisa.getInstance();
                    Gestore_Packet gp = Gestore_Packet.GetInstance();
                    c.mittente = false;
                    // TODO add your handling code here:               
                    String str = "n;" + c.nome + ";";
                    byte[] buffer = str.getBytes();
                    DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                    InetAddress ip = InetAddress.getByName(ipname);
                    gp.connectedIP = null;
                    packet.setAddress(ip);
                    packet.setPort(port);
                    Condivisa.getInstance().serverInvio.send(packet);
                } catch (SocketException ex) {
                    Logger.getLogger(TestConnessioneFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(TestConnessioneFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(TestConnessioneFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(this, "Connessione annullata...");
            }

        }

    }

    private void Attacco(Mossa m) {
        try {
            //invio attacco
            //aggiungere che prende la mossa selezionata
            System.out.println(m.getNome());
            System.out.println("ATTACCO INVIATO");
            Random r = new Random();
            String ipname = Gestore_Packet.GetInstance().connectedIP.getHostName();
            int chance = r.nextInt() % 3;
            int danno = 0;
            if (chance != 2) {

                danno = m.getDannoBase() * c.squadra.get(c.pokemonAttuale).getAttacco();//mancano gli eventuali buff e debuff
            }
            String effetto = "";
            String str = "at;" + m.getNome() + ";" + (danno) + ";" + effetto + ";";
            byte[] buffer = str.getBytes();
            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
            InetAddress ip = InetAddress.getByName(ipname);
            packet.setAddress(ip);
            packet.setPort(port);
            c.serverInvio.send(packet);
        } catch (SocketException ex) {
            Logger.getLogger(TestConnessioneFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnknownHostException ex) {
            Logger.getLogger(TestConnessioneFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestConnessioneFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void Chiusura() {
        try {
            // TODO add your handling code here:
            if (Condivisa.getInstance().connected) {
                try {
                    Condivisa.getInstance().connected = false;
                    Gestore_Packet gp = Gestore_Packet.GetInstance();
                    System.out.println("MESSAGGIO CHIUSURA INVIATO");
                    String ipname = Gestore_Packet.GetInstance().connectedIP.getHostName();
                    String str = "c;";
                    byte[] buffer = str.getBytes();
                    DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                    InetAddress ip = InetAddress.getByName(ipname);
                    packet.setAddress(ip);
                    packet.setPort(port);
                    Condivisa.getInstance().serverInvio.send(packet);
                    gp.connectedIP = null;
                    panel = new JPanel();
                    panel.setLayout(new GridBagLayout());
                    panel.setDoubleBuffered(true);
                    jScrollPane1.getViewport().add(panel);
                    c.nomeDestinatario = "";
                    jScrollPane1.setBorder(null);
                } catch (SocketException ex) {
                    Logger.getLogger(TestConnessioneFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(TestConnessioneFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(TestConnessioneFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Connettersi con un host");
            }
        } catch (SocketException ex) {
            Logger.getLogger(TestConnessioneFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void CambioPokemon(Pokemon selezionato) {
        try {
            //invio cambio pokemon
            System.out.println(m.getNome());
            System.out.println("POKEMON INVIATO");
            String ipname = Gestore_Packet.GetInstance().connectedIP.getHostName();
            String effetto = "";
            String str = "p;" + selezionato.getNome() + ";" + selezionato.getVitaAttuale() + ";" + c.numePokemon + ";" + selezionato.getImgFront() + ";";
            byte[] buffer = str.getBytes();
            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
            InetAddress ip = InetAddress.getByName(ipname);
            packet.setAddress(ip);
            packet.setPort(port);
            c.serverInvio.send(packet);
        } catch (SocketException ex) {
            Logger.getLogger(TestConnessioneFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (UnknownHostException ex) {
            Logger.getLogger(TestConnessioneFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestConnessioneFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }


    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        if (!c.connected) {
            Connesione();
        } else {
            JOptionPane.showMessageDialog(this, "Sei già connesso ad una partita");
        }

    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        if (c.turno) {
            Attacco(m);
            c.turno = false;

        } else {
            AlertTurno();
        }

    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:  if (c.turno) {
        if (c.turno) {
            Pokemon selezionato = c.squadra.get(c.pokemonAttuale);
            CambioPokemon(selezionato);
            c.turno = false;
        } else {
            AlertTurno();
        }

    }//GEN-LAST:event_jButton3MouseClicked

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        //secgli attacco
        m = c.getMossaByName(jComboBox1.getSelectedItem().toString());


    }//GEN-LAST:event_jComboBox1ItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws SocketException, InterruptedException, UnknownHostException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestConnessioneFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestConnessioneFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestConnessioneFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestConnessioneFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                try {
                    new TestConnessioneFrame().setVisible(true);
                } catch (SocketException ex) {
                    Logger.getLogger(TestConnessioneFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(TestConnessioneFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
        Thread.sleep(1000);

    }
    JPanel panel = new JPanel();
    GridBagConstraints gc = new GridBagConstraints();
    int i = 0;

  
//    @Override
//    public void paint(Graphics g) {
//        super.paint(g); //To change body of generated methods, choose Tools | Templates.
//        Condivisa c = null;
//        try {
//            c = Condivisa.getInstance();
//        } catch (SocketException ex) {
//            Logger.getLogger(TestConnessioneFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        if (!c.messaggio.equals("")) {
//            JTextArea text = new JTextArea(1, 17);
//            Font f = new Font("Italic", Font.ITALIC, 15);
//            text.setBackground(Color.DARK_GRAY);
//            text.setForeground(Color.WHITE);
//            text.setFont(f);
//            text.setLineWrap(true);
//            text.setText(c.messaggio);
//            gc.gridx = 0;
//            gc.gridy = y;
//            y++;
//            panel.add(text, gc);
//            jScrollPane1.getViewport().add(panel);
//            c.messaggio = "";
//        }
//        if (!c.nomeDestinatario.equals("")) {
//            TitledBorder border = new TitledBorder(c.nomeDestinatario.toUpperCase());
//            border.setTitleJustification(TitledBorder.CENTER);
//            jScrollPane1.setBorder(border);
//            this.revalidate();
//
//        }
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    // End of variables declaration//GEN-END:variables
}
